{"version":3,"sources":["../src/string-pad-start-x.js"],"names":[],"mappings":"AAAA,OAAO,sBAAP,MAAmC,4BAAnC;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,QAAP,MAAqB,aAArB;AAEA,IAAM,YAAY,GAAG,EAArB;IACO,K,GAAS,Y,CAAT,K;AACP,IAAM,KAAK,GAAG,GAAd,C,CAEA;AACA;;AACA;;;;;;;;;;;;;;;;;AAiBA;;AACA,IAAM,QAAQ,GAAG,SAAS,QAAT,CAAkB,MAAlB,EAA0B,YAA1B,EAAwC;AACvD,MAAM,GAAG,GAAG,KAAK,CAAC,sBAAsB,CAAC,MAAD,CAAvB,CAAjB;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAL,CAA7B;AACA;;AACA,MAAM,UAAU,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAnB,GAAuB,SAAS,CAAC,CAAD,CAAhC,GAAsC,KAAK,CAA9D;AACA,MAAI,MAAM,GAAG,OAAO,UAAP,KAAsB,WAAtB,GAAoC,YAApC,GAAmD,KAAK,CAAC,UAAD,CAArE;;AAEA,MAAI,MAAM,KAAK,YAAf,EAA6B;AAC3B,IAAA,MAAM,GAAG,KAAT;AACD;;AAED,MAAM,YAAY,GAAG,QAAQ,CAAC,YAAD,CAA7B;;AAEA,MAAI,YAAY,IAAI,YAApB,EAAkC;AAChC,WAAO,GAAP;AACD;;AAED,MAAM,OAAO,GAAG,YAAY,GAAG,YAA/B;;AACA,SAAO,MAAM,CAAC,MAAP,GAAgB,OAAvB,EAAgC;AAC9B,QAAM,IAAI,GAAG,MAAM,CAAC,MAApB;AACA,QAAM,kBAAkB,GAAG,OAAO,GAAG,IAArC;AACA,IAAA,MAAM,IAAI,IAAI,GAAG,kBAAP,GAA4B,KAAK,CAAC,IAAN,CAAW,MAAX,EAAmB,CAAnB,EAAsB,kBAAtB,CAA5B,GAAwE,MAAlF;AACD;;AAED,MAAM,qBAAqB,GAAG,MAAM,CAAC,MAAP,GAAgB,OAAhB,GAA0B,KAAK,CAAC,IAAN,CAAW,MAAX,EAAmB,CAAnB,EAAsB,OAAtB,CAA1B,GAA2D,MAAzF;AAEA,SAAO,qBAAqB,GAAG,GAA/B;AACD,CA3BD;;AA6BA,eAAe,QAAf","file":"string-pad-start-x.esm.js","sourcesContent":["import requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\nimport toLength from 'to-length-x';\n\nconst EMPTY_STRING = '';\nconst {slice} = EMPTY_STRING;\nconst SPACE = ' ';\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * This method pads the current string with another string (repeated, if needed)\n * so that the resulting string reaches the given length. The padding is applied\n * from the start (left) of the current string.\n *\n * @param {string} string - The string to pad.\n * @throws {TypeError} If target is null or undefined.\n * @param {number} targetLength - The length of the resulting string once the\n *  current string has been padded. If the value is lower than the current\n *  string's length, the current string will be returned as is.\n * @param {string} [padString] - The string to pad the current string with. If\n *  this string is too long to stay within the target length, it will be\n *  truncated and the left-most part will be applied. The default value for this\n *  parameter is \" \" (U+0020).\n * @returns {string} A String of the specified length with the pad string\n *  applied from the start.\n */\n// eslint-enable jsdoc/check-param-names\nconst padStart = function padStart(string, targetLength) {\n  const str = toStr(requireObjectCoercible(string));\n  const stringLength = toLength(str.length);\n  /* eslint-disable-next-line prefer-rest-params,no-void */\n  const fillString = arguments.length > 2 ? arguments[2] : void 0;\n  let filler = typeof fillString === 'undefined' ? EMPTY_STRING : toStr(fillString);\n\n  if (filler === EMPTY_STRING) {\n    filler = SPACE;\n  }\n\n  const intMaxLength = toLength(targetLength);\n\n  if (intMaxLength <= stringLength) {\n    return str;\n  }\n\n  const fillLen = intMaxLength - stringLength;\n  while (filler.length < fillLen) {\n    const fLen = filler.length;\n    const remainingCodeUnits = fillLen - fLen;\n    filler += fLen > remainingCodeUnits ? slice.call(filler, 0, remainingCodeUnits) : filler;\n  }\n\n  const truncatedStringFiller = filler.length > fillLen ? slice.call(filler, 0, fillLen) : filler;\n\n  return truncatedStringFiller + str;\n};\n\nexport default padStart;\n"]}